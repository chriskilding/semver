#!/usr/bin/env perl

##
## semver
## Semantic Version parser.
##

use strict;
use warnings;
use feature qw(say);
use Scalar::Util qw(looks_like_number);

# Regex adapted from semver.org: https://github.com/semver/semver/pull/460
my $semver_regex = '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(?:\-([0-9a-zA-Z-]+(?:\.(?:0|[1-9a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$';

my $semver_precedence_regex_head = '^([0-9a-zA-Z-]*)';
my $semver_precedence_regex_tail = '\.(0|[1-9a-zA-Z-][0-9a-zA-Z-]*)';

sub usage() {
    my $program = "semver";

    say STDERR "Semantic Version parser.";
    say STDERR "";
    say STDERR "Usage:";
    say STDERR "  $program compare <version> <version>";
    say STDERR "  $program decrement-major <version>";
    say STDERR "  $program decrement-minor <version>";
    say STDERR "  $program decrement-patch <version>";
    say STDERR "  $program get-major <version>";
    say STDERR "  $program get-minor <version>";
    say STDERR "  $program get-patch <version>";
    say STDERR "  $program get-prerelease <version>";
    say STDERR "  $program get-build <version>";
    say STDERR "  $program grep -";
    say STDERR "  $program increment-major <version>";
    say STDERR "  $program increment-minor <version>";
    say STDERR "  $program increment-patch <version>";
    say STDERR "  $program init";
    say STDERR "  $program validate <string>";
    say STDERR "  $program (-h | --help)";
    say STDERR "";
    say STDERR "Options:";
    say STDERR "  -h --help  Show this screen.";

    exit 1;
}

sub string_matches {
    my ($str, $regex) = @_;

    my @matches = ($str =~ /$regex/);

    return @matches;
}

sub get {
    my ($str) = @_;

    my @matches = string_matches($str, $semver_regex);

    if ((defined $matches[0]) && (defined $matches[1]) && (defined $matches[2])) {
        return @matches;
    } else {
        exit 1
    }
}

sub semver_get_prerelease_identifiers {
    my ($prerelease) = @_;

    my @prerelease_identifiers_first = $prerelease =~ /$semver_precedence_regex_head/;
    my @prerelease_identifiers_rest = $prerelease =~ /$semver_precedence_regex_tail/g;

    push(@prerelease_identifiers_first, @prerelease_identifiers_rest);

    return @prerelease_identifiers_first;
}

sub semver::compare {
    my ($a, $b) = @_;

    my @a_matches = get($a);

    my $a_major = $a_matches[0];
    my $a_minor = $a_matches[1];
    my $a_patch = $a_matches[2];
    my $a_prerelease = $a_matches[3] if scalar(@a_matches) > 3;

    my @b_matches = get($b);

    my $b_major = $b_matches[0];
    my $b_minor = $b_matches[1];
    my $b_patch = $b_matches[2];
    my $b_prerelease = $b_matches[3] if scalar(@b_matches) > 3;

    my $gt = "1";
    my $eq = "0";
    my $lt = "-1";

    if ($a_major > $b_major) {
        return $gt;
    } elsif ($a_major eq $b_major) {
        if ($a_minor > $b_minor) {
            return $gt;
        } elsif ($a_minor eq $b_minor) {
            if ($a_patch > $b_patch) {
                return $gt;
            } elsif ($a_patch eq $b_patch) {
                if ((!defined $a_prerelease) && (defined $b_prerelease)) {
                    return $gt;
                } elsif ((defined $a_prerelease) && (!defined $b_prerelease)) {
                    return $lt;
                } elsif ((defined $a_prerelease) && (defined $b_prerelease)) {
                    if ($a_prerelease eq $b_prerelease) {
                        return $eq;
                    } else {
                        my @a_prerelease_identifiers = semver_get_prerelease_identifiers($a_prerelease);
                        my $a_prerelease_identifiers_count = scalar(@a_prerelease_identifiers);
                        my @b_prerelease_identifiers = semver_get_prerelease_identifiers($b_prerelease);
                        my $b_prerelease_identifiers_count = scalar(@b_prerelease_identifiers);

                        if ($a_prerelease_identifiers_count > $b_prerelease_identifiers_count) {
                            # FIXME: A larger set of pre-release fields has a higher precedence than a smaller set, IF all of the preceding identifiers are equal.
                            # Currently this does not check if all preceding identifiers are equal.
                            return $gt;
                        } elsif ($a_prerelease_identifiers_count eq $b_prerelease_identifiers_count) {
                            for (my $i = 0; $i < $a_prerelease_identifiers_count; $i++) {
                                my $a_identifier = $a_prerelease_identifiers[$i];
                                my $b_identifier = $b_prerelease_identifiers[$i];
#                                say "a: $a_identifier";
#                                say "b: $b_identifier";
                                if (looks_like_number($a_identifier) && looks_like_number($b_identifier)) {
                                    if ($a_identifier > $b_identifier) {
                                        return $gt;
                                    } elsif ($a_identifier < $b_identifier) {
                                        return $lt;
                                    }
                                } elsif (!looks_like_number($a_identifier) && looks_like_number($b_identifier)) {
                                    return $gt;
                                } else {
                                    my $a_cmp_b = $a_identifier cmp $b_identifier;
                                    if ($a_cmp_b eq 1) {
                                        return $gt;
                                    } elsif ($a_cmp_b eq -1) {
                                        return $lt;
                                    }
                                }
                            }
                            return $lt;
                        } else {
                            return $lt;
                        }
                    }
                } else {
                    return $eq;
                }
            } else {
                return $lt;
            }
        } else {
            return $lt;
        }
    } else {
        return $lt;
    }
}

sub semver::decrement_major {
    my ($version) = @_;

    my @matches = get($version);

    my $major = $matches[0];

    if ($major > 0) {
        my $new_major = $major - 1;
        say "$new_major.0.0";
    } else {
        exit 1;
    }
}

sub semver::decrement_minor {
    my ($version) = @_;

    my @matches = get($version);

    my $major = $matches[0];
    my $minor = $matches[1];

    if ($minor > 0) {
        my $new_minor = $minor - 1;
        say "$major.$new_minor.0";
    } else {
        exit 1;
    }
}

sub semver::decrement_patch {
    my ($version) = @_;

    my @matches = get($version);

    my $major = $matches[0];
    my $minor = $matches[1];
    my $patch = $matches[2];

    if ($patch > 0) {
        my $new_patch = $patch - 1;
        say "$major.$minor.$new_patch";
    } else {
        exit 1;
    }
}

sub semver::get_major {
    my ($version) = @_;

    my @matches = get($version);

    say $matches[0];
}

sub semver::get_minor {
    my ($version) = @_;

    my @matches = get($version);

    say $matches[1];
}

sub semver::get_patch {
    my ($version) = @_;

    my @matches = get($version);

    say $matches[2];
}

sub semver::get_prerelease {
    my ($version) = @_;

    my @matches = get($version);

    say $matches[3];
}

sub semver::get_build {
    my ($version) = @_;

    my @matches = get($version);

    say $matches[4];
}

sub semver::grep {
    while (my $line = <STDIN>) {
        my @words = split(/\s+/, $line);
        foreach (@words) {
            if (/$semver_regex/) {
                print "$1.$2.$3";
                print "-$4" if (length $4 // '');
                print "+$5" if (length $5 // '');
                print "\n";
            }
        }
    }
}

sub semver::increment_major {
    my ($version) = @_;

    my @matches = get($version);

    my $major = $matches[0];
    my $new_major = $major + 1;

    say "$new_major.0.0";
}

sub semver::increment_minor {
    my ($version) = @_;

    my @matches = get($version);

    my $major = $matches[0];
    my $minor = $matches[1];
    my $new_minor = $minor + 1;

    say "$major.$new_minor.0";
}

sub semver::increment_patch {
    my ($version) = @_;

    my @matches = get($version);

    my $major = $matches[0];
    my $minor = $matches[1];
    my $patch = $matches[2];
    my $new_patch = $patch + 1;

    say "$major.$minor.$new_patch";
}

sub semver::init {
    say "0.0.0";
}

sub semver::validate {
    my ($str) = @_;

    ($str =~ /$semver_regex/) ? exit 0 : exit 1;
}

sub main {
    my @args = @_;

    my $num_args = scalar(@args);
    if ($num_args < 1) {
        usage();
    }

    my $subcommand = $args[0];

    if ($subcommand eq "grep") {
        semver::grep();
    } elsif ($subcommand eq "init") {
        semver::init();
    } elsif ($subcommand eq "decrement-major") {
        semver::decrement_major($args[1]);
    } elsif ($subcommand eq "decrement-minor") {
        semver::decrement_minor($args[1]);
    } elsif ($subcommand eq "decrement-patch") {
        semver::decrement_patch($args[1]);
    } elsif ($subcommand eq "get-major") {
        semver::get_major($args[1]);
    } elsif ($subcommand eq "get-minor") {
        semver::get_minor($args[1]);
    } elsif ($subcommand eq "get-patch") {
        semver::get_patch($args[1]);
    } elsif ($subcommand eq "get-prerelease") {
        semver::get_prerelease($args[1]);
    } elsif ($subcommand eq "get-build") {
        semver::get_build($args[1]);
    } elsif (($subcommand eq "-h") || ($subcommand eq "--help")) {
        usage();
    } elsif ($subcommand eq "increment-major") {
        semver::increment_major($args[1]);
    } elsif ($subcommand eq "increment-minor") {
        semver::increment_minor($args[1]);
    } elsif ($subcommand eq "increment-patch") {
        semver::increment_patch($args[1]);
    } elsif ($subcommand eq "validate") {
        semver::validate($args[1]);
    } elsif ($subcommand eq "compare") {
        say semver::compare($args[1], $args[2]);
    } else {
        usage();
    }
}

main(@ARGV);
