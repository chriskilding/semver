#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say switch);
use Scalar::Util qw(looks_like_number);
use List::Util qw(max);
use Getopt::Long qw(GetOptionsFromArray :config bundling);
no if $] >= 5.018, warnings => qw(experimental::smartmatch);

package semver;

# Regex from semver.org: https://github.com/semver/semver/pull/460
my $semver_regex = '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?';
my $semver_precedence_regex_head = '^([0-9a-zA-Z-]*)';
my $semver_precedence_regex_tail = '\.(0|[1-9a-zA-Z-][0-9a-zA-Z-]*)';

my $greater_than = 1;
my $equal_to = 0;
my $less_than = -1;

sub semver::usage() {
    my $program = "semver";

    say STDERR "Semantic Versioning utility.";
    say STDERR "";
    say STDERR "Usage:";
    say STDERR "  $program [-hqst]";
    say STDERR "";
    say STDERR "Options:";
    say STDERR "  -h --help      Show the help screen.";
    say STDERR "  -q --quiet     Quiet mode (suppress normal output).";
    say STDERR "  -s --sort      Sort the versions.";
    say STDERR "  -t --tabulate  Tabulate the versions (separator: '\\t').";

    exit 1;
}

sub semver::get {
    my ($str) = @_;

    my @matches = $str =~ /^$semver_regex$/;

    if ((defined $matches[0]) && (defined $matches[1]) && (defined $matches[2])) {
        return @matches;
    } else {
        exit 1;
    }
}

sub semver::get_prerelease_identifiers {
    my ($prerelease) = @_;

    my @prerelease_identifiers_first = $prerelease =~ /$semver_precedence_regex_head/;
    my @prerelease_identifiers_rest = $prerelease =~ /$semver_precedence_regex_tail/g;

    push(@prerelease_identifiers_first, @prerelease_identifiers_rest);

    return @prerelease_identifiers_first;
}

sub semver::compare_prerelease_identifier {
    my ($v1, $v2) = @_;

    if ((defined $v1) && (defined $v2)) {
        if (main::looks_like_number($v1) && main::looks_like_number($v2)) {
            if ($v1 > $v2) {
                return $greater_than;
            } elsif ($v1 < $v2) {
                return $less_than;
            }
        } elsif (!main::looks_like_number($v1) && main::looks_like_number($v2)) {
            return $greater_than;
        } else {
            my $a_cmp_b = $v1 cmp $v2;

            if ($a_cmp_b eq 1) {
                return $greater_than;
            } elsif ($a_cmp_b eq -1) {
                return $less_than;
            }
        }
        return $equal_to;
    } elsif ((defined $v1) && (!defined $v2)) {
        return $greater_than;
    } elsif ((!defined $v1) && (defined $v2)) {
        return $less_than;
    }
}

sub semver::compare_prerelease {
    my ($v1, $v2) = @_;

    if ((!defined $v1) && (defined $v2)) {
        return $greater_than;
    } elsif ((defined $v1) && (!defined $v2)) {
        return $less_than;
    } elsif ((defined $v1) && (defined $v2)) {
        my @a_identifiers = get_prerelease_identifiers($v1);
        my @b_identifiers = get_prerelease_identifiers($v2);

        for (my $i = 0; $i < main::max(scalar(@a_identifiers), scalar(@b_identifiers)); $i++) {
            my $a_identifier = $a_identifiers[$i];
            my $b_identifier = $b_identifiers[$i];

            my $a_cmp_b = compare_prerelease_identifier($a_identifier, $b_identifier);

            if ($a_cmp_b eq 1) {
                return $greater_than;
            } elsif ($a_cmp_b eq -1) {
                return $less_than;
            }
        }

        return $equal_to;
    } else {
        return $equal_to;
    }
}

sub semver::compare {
    my ($v1, $v2) = @_;

    my @a_matches = get($v1);

    my $a_major = $a_matches[0];
    my $a_minor = $a_matches[1];
    my $a_patch = $a_matches[2];
    my $a_prerelease = $a_matches[3];

    my @b_matches = get($v2);

    my $b_major = $b_matches[0];
    my $b_minor = $b_matches[1];
    my $b_patch = $b_matches[2];
    my $b_prerelease = $b_matches[3];

    if ($a_major > $b_major) {
        return $greater_than;
    } elsif (($a_major eq $b_major) && ($a_minor > $b_minor)) {
        return $greater_than;
    } elsif (($a_major eq $b_major) && ($a_minor eq $b_minor) && ($a_patch > $b_patch)) {
        return $greater_than;
    } elsif (($a_major eq $b_major) && ($a_minor eq $b_minor) && ($a_patch eq $b_patch)) {
        return compare_prerelease($a_prerelease, $b_prerelease);
    } else {
        return $less_than;
    }
}

sub semver::grep {
    my ($quiet, $sort, $tabulate) = @_;

    if ($quiet) {
        while (my $line = <STDIN>) {
            my @words = split(/\s+/, $line);
            if (grep(/^$semver_regex$/, @words)) {
                exit 0;
            }
        }
        exit 1;
    }

    if ($sort) {
        my $sort_fn = sub ($$) { sort_pair($_[0], $_[1]) };

        my @lines = <STDIN>;

        chomp(@lines);

        # Extra validation if just 1 element, because Perl does not sort unless there are at least 2 elements.
        if ((scalar(@lines) eq 1) && ($lines[0] !~ /^$semver_regex$/)) {
            exit 1;
        }

        @lines = sort $sort_fn @lines;

        foreach my $line (@lines) {
            say $line;
        }

        exit 0;
    } else {
        my $num_matches = 0;

        while (my $line = <STDIN>) {
            my @words = split(/\s+/, $line);
            foreach (@words) {
                if (/^$semver_regex$/) {
                    $num_matches++;

                    if ($tabulate) {
                        my $delim = "\t";
                        print $1 . $delim . $2 . $delim . $3;
                        if ((!defined $4) && (defined $5)) {
                            print $delim . $delim . $5;
                        } else {
                            print $delim . $4 if (length $4 // '');
                            print $delim . $5 if (length $5 // '');
                        }
                        print "\n";
                    } else {
                        print "$1.$2.$3";
                        print "-$4" if (length $4 // '');
                        print "+$5" if (length $5 // '');
                        print "\n";
                    }
                }
            }
        }

        if ($num_matches < 1) {
            exit 1;
        }
    }
}

sub semver::sort_pair {
    my ($v1, $v2) = @_;

    my $result = compare($v1, $v2);

    if ($result eq $equal_to) {
        return $v1 cmp $v2;
    } else {
        return $result;
    }
}

sub main {
    my @args = @_;

    my ($help, $quiet, $sort, $tabulate);

    main::GetOptionsFromArray(
        \@args,
        "help|h"       => \$help,
        "quiet|q"      => \$quiet,
        "sort|s"       => \$sort,
        "tabulate|t" => \$tabulate,
    ) or exit 1;

    usage() if $help;


    semver::grep($quiet, $sort, $tabulate);
}

main(@ARGV);
