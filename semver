#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say switch);
use Getopt::Long qw(GetOptionsFromArray);
no if $] >= 5.018, warnings => qw(experimental::smartmatch);

use Semver qw($regex);

sub usage() {
    my $program = "semver";

    say STDERR "Semantic Versioning utility.";
    say STDERR "";
    say STDERR "Usage:";
    say STDERR "  $program get [--major | --minor | --patch | --prerelease | --build] <version>";
    say STDERR "  $program grep -";
    say STDERR "  $program validate <string>";
    say STDERR "  $program [-h]";
    say STDERR "";
    say STDERR "Options:";
    say STDERR "  -h --help  Show this help screen.";

    exit 1;
}

sub _get {
    my ($version) = @_;

    my @matches = Semver::get($version);

    my $major = $matches[0];
    my $minor = $matches[1];
    my $patch = $matches[2];
    my $prerelease = $matches[3];
    my $build = $matches[4];

    print $major . "\t" . $minor . "\t" . $patch;

    if ($build) {
        print "\t" . ($prerelease // '') . "\t" . $build;
    } elsif ($prerelease) {
        print "\t" . $prerelease;
    }

    print "\n";
}

sub _get_major {
    my ($version) = @_;

    my @matches = Semver::get($version);

    say $matches[0];
}

sub _get_minor {
    my ($version) = @_;

    my @matches = Semver::get($version);

    say $matches[1];
}

sub _get_patch {
    my ($version) = @_;

    my @matches = Semver::get($version);

    say $matches[2];
}

sub _get_prerelease {
    my ($version) = @_;

    my @matches = Semver::get($version);

    say $matches[3];
}

sub _get_build {
    my ($version) = @_;

    my @matches = Semver::get($version);

    say $matches[4];
}

sub _grep {
    while (my $line = <STDIN>) {
        my @words = split(/\s+/, $line);
        foreach (@words) {
            if (/$regex/) {
                print "$1.$2.$3";
                print "-$4" if (length $4 // '');
                print "+$5" if (length $5 // '');
                print "\n";
            }
        }
    }
}

sub _validate {
    my ($str) = @_;

    ($str =~ /$regex/) ? exit 0 : exit 1;
}

sub num_trues(@) {
    my $trues = 0;
    foreach (@_) {
        $trues++ if ($_)
    }
    return $trues
}

sub main {
    my @args = @_;

    my $subcommand = shift @args // '';

    for ($subcommand) {
        when (/grep/) {
            _grep();
        }
        when (/get/) {
            my $major, my $minor, my $patch, my $prerelease, my $build;

            GetOptionsFromArray(
                \@args,
                "major" => \$major,
                "minor" => \$minor,
                "patch" => \$patch,
                "prerelease" => \$prerelease,
                "build" => \$build,
            ) or exit 1;

            usage() if (num_trues($major, $minor, $patch, $prerelease, $build) > 1);

            if ($major) {
                _get_major($args[0]);
            } elsif ($minor) {
                _get_minor($args[0]);
            } elsif ($patch) {
                _get_patch($args[0]);
            } elsif ($prerelease) {
                _get_prerelease($args[0]);
            } elsif ($build) {
                _get_build($args[0]);
            } else {
                _get($args[0]);
            }
        }
        when (/validate/) {
            _validate($args[0]);
        }
        default {
            usage();
        }
    }
}

main(@ARGV);
