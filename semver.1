.Dd February 19, 2019
.Dt SEMVER 1
.Os
.Sh NAME
.Nm semver
.Nd Semantic Versioning utility
.Sh SYNOPSIS
.Nm
grep
.Op Fl coq
.Fl
.Nm
printf
.Ar format
.Ar version
.Nm
sort
.Op Fl r
.Fl
.Nm
.Op Fl h
.Sh DESCRIPTION
The
.Nm
utility generates, modifies, parses, sorts, and validates Semantic Version strings.
.Ss grep
The
.Nm
utility can search text from STDIN, and select any lines that contain one or more Semantic Version strings, in the style of
.Xr grep 1 .
Each input line that has at least one Semantic Version string is written to the standard output.
.Pp
A line containing a
.Sq version
string will be matched within the text stream if the following criteria are met:
.Bl -bullet -compact
.It
.Sq version
is a valid Semantic Version.
.It
.Sq version
is a whole word.
.It
.Sq version
has whitespace immediately before it, OR its first character is also the first character of the line.
.It
.Sq version
has whitespace immediately after it, OR its last character is also the last character of the line.
.El
.Pp
Options:
.Bl -tag -width Ds -offset indent -compact
.It Fl c
Write only a count of selected lines to standard output.
.It Fl o
Only-matching. Print only the matched Semantic Version strings found on a line, with each such version on a separate output line.
.It Fl q
Quiet. Nothing shall be written to the standard output, regardless of matching lines. Exit immediately with zero status if an input line is selected.
.El
.Pp
Exit status:
.Bl -tag -width Ds -offset indent -compact
.It 0
One or more lines were selected (i.e. there was at least one valid Semantic Version).
.It 1
No lines were selected (i.e. there were no valid Semantic Versions), or an invalid option was specified.
.El
.Ss printf
The
.Nm
utility can format and print a
.Ar version
string under control of the
.Ar format
string, in the style of
.Xr printf 1 .
.Pp
The
.Ar format
is a character string which contains three types of objects:
.Bl -bullet -compact
.It
Plain characters, which are simply copied to standard output.
.It
Character escape sequences (in
.St -ansiC
backslash notation), which are converted and copied to the standard output.
.It
Format specifiers (prefixed by the '%' character), each of which causes printing of the relevant component of the
.Ar version
that was given.
.El
.Pp
Note: It is not an error to provide the format specifiers
.Cm %prerelease
or
.Cm %build
in the
.Ar format
string when the
.Ar version
does not contain a prerelease or build.
.Pp
Escape characters:
.Bl -tag -width Ds -offset indent -compact
.It Cm \ea
Write a <bell> character.
.It Cm \eb
Write a <backspace> character.
.It Cm \ec
Ignore remaining characters in this string.
.It Cm \ef
Write a <form-feed> character.
.It Cm \en
Write a <new-line> character.
.It Cm \er
Write a <carriage return> character.
.It Cm \et
Write a <tab> character.
.It Cm \e\'
Write a <single quote> character.
.It Cm \e\e
Write a backslash character.
.El
.Pp
Format specifiers:
.Bl -tag -offset indent -compact
.It Cm %major
Print the major component of
.Ar version
.It Cm %minor
Print the minor component of
.Ar version
.It Cm %patch
Print the patch component of
.Ar version
.It Cm %prerelease
Print the prerelease component of
.Ar version
.It Cm %build
Print the build component of
.Ar version
.El
.Pp
Exit status:
.Bl -tag -width Ds -offset indent -compact
.It 0
Success.
.It 1
The
.Ar format
string contained invalid specifiers, or
.Ar version
was invalid.
.El
.Ss sort
The
.Nm
utility can sort a list of line-delimited Semantic Version strings from STDIN in precedence order (low-to-high), in the style of
.Xr sort 1 .
.Pp
Note: Some aspects of Semantic Version ordering are undefined in the specification. The
.Nm
utility makes implementation-specific choices to stabilise ordering across executions. Please see the WARNINGS section for details.
.Pp
Options:
.Bl -tag -width Ds -offset indent -compact
.It Fl r
Sort in reverse order (high-to-low).
.El
.Pp
Exit status:
.Bl -tag -width Ds -offset indent -compact
.It 0
Success.
.It 1
An invalid option was specified, or the input was invalid (i.e. it contained something besides Semantic Versions and line delimiter characters).
.El
.Sh OPTIONS
.Pp
The
.Nm
utility understands the following command-line options:
.Bl -tag -width Ds indent
.It Fl h
Display the usage screen.
.El
.Sh EXAMPLES
.Ss Grep
Given a line-separated text stream:
.Pp
.Dl semver grep <<EOF
.Dl foo 1.1.1
.Dl bar
.Dl baz 2.2.2 qux 3.3.3
.Dl EOF
.Pp
The result will be:
.Pp
.Dl foo 1.1.1
.Dl baz 2.2.2 qux 3.3.3
.Pp
With the -o flag the result will be:
.Pp
.Dl 1.1.1
.Dl 2.2.2
.Dl 3.3.3
.Pp
To validate a candidate version string, use the command's exit status:
.Pp
.Dl [[ $(semver grep -q <<< '1.2.3-alpha+1') ]]
.Ss Printf
.Pp
To format and print the version string
.Sq 1.2.3-SNAPSHOT+2019
as CSV:
.Pp
.Dl $ semver printf '%major,%minor,%patch,%prerelease,%build' '1.2.3-SNAPSHOT+2019'
.Dl 1,2,3,SNAPSHOT,2019
.Ss Sort
Given a line-separated list of version strings:
.Pp
.Dl semver sort <<EOF
.Dl 2.2.2
.Dl 1.1.1
.Dl 4.4.4
.Dl EOF
.Pp
The result will be:
.Pp
.Dl 1.1.1
.Dl 2.2.2
.Dl 4.4.4
.Sh EXIT STATUS
.Ex -std
.Sh WARNINGS
The Semantic Versioning standard does not define an ordering for two versions that are precedence-equal but stringwise-unequal (for example the BUILD is different). To guarantee predictable ordering between executions, the
.Nm
utility applies an additional natural sort on top of the Semantic Version precedence sort. This additional sort is IMPLEMENTATION-SPECIFIC and SUBJECT TO CHANGE between releases, so its algorithm is deliberately left undocumented. You should not rely on it.
.Sh SEE ALSO
.Xr grep 1 ,
.Xr printf 1 ,
.Xr sort 1
.Sh STANDARDS
The
.Nm
utility is expected to conform to the Semantic Versioning standard, defined at https://semver.org.
