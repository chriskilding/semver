.Dd February 19, 2019
.Dt SEMVER 1
.Os
.Sh NAME
.Nm semver
.Nd Semantic Versioning utility
.Sh SYNOPSIS
.Nm
awk
.Op Fl -major | Fl -minor | Fl -patch | Fl -prerelease | Fl -build
.Fl
.Nm
compare
.Ar version
.Ar version
.Nm
decrement
.Op Fl -major | Fl -minor | Fl -patch
.Ar version
.Nm
grep
.Op Fl o
.Fl
.Nm
increment
.Op Fl -major | Fl -minor | Fl -patch
.Ar version
.Nm
sort
.Op Fl r
.Fl
.Nm
validate
.Ar string
.Nm
.Op Fl h
.Sh DESCRIPTION
The
.Nm
utility compares, generates, modifies, parses, sorts, and validates Semantic Version strings.
.Ss awk
.Nm
can scan the standard input for lines that contain
.Ar version
strings, extract their components, and print the components in tab-separated format to the standard output, in the style of Awk.
.Pp
The main difference from Awk is that the pattern to match is baked in to
.Nm
- you can think of this subcommand as a partially applied Awk function dedicated to finding Semantic Version strings, where you may only tweak certain parameters.
.Pp
It is not an error to select an optional component that is not present in the input
.Ar version
string.
.Pp
The format looks like this:
.Pp
.Dl $ semver awk <<< MAJOR.MINOR.PATCH
.Dl MAJOR\tMINOR\tPATCH
.Pp
.Dl $ semver awk <<< MAJOR.MINOR.PATCH-PRERELEASE
.Dl MAJOR\tMINOR\tPATCH\tPRERELEASE
.Pp
.Dl $ semver awk <<< MAJOR.MINOR.PATCH+BUILD
.Dl MAJOR\tMINOR\tPATCH\t\tBUILD
.Pp
.Dl $ semver awk <<< MAJOR.MINOR.PATCH-PRERELEASE+BUILD
.Dl MAJOR\tMINOR\tPATCH\tPRERELEASE\tBUILD
.Pp
The awk subcommand understands the following (mutually exclusive) options:
.Bl -tag -width indent
.It Fl -major
Get only the MAJOR component of
.Ar version
.It Fl -minor
Get only the MINOR component of
.Ar version
.It Fl -patch
Get only the PATCH component of
.Ar version
.It Fl -prerelease
Get only the PRERELEASE component of
.Ar version
.It Fl -build
Get only the BUILD component of
.Ar version
.El
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If more than one mutually exclusive option is given.
.It
If
.Ar version
is invalid.
.El
.Ss compare
.Nm
can compare two Semantic Versions
.Ar a
and
.Ar b
for precedence.
.Pp
The result of the comparison is a single number printed to STDOUT. The numbers are:
.Bl -tag
.It -1
.Ar a
<
.Ar b
.It 0
.Ar a
==
.Ar b
.It 1
.Ar a
>
.Ar b
.El
.Pp
If either
.Ar a
or
.Ar b
are omitted, no result will be printed, and the utility will exit with an error code.
.Pp
Note: Precedence comparison is NOT a simple lexicographic or numerical comparison - for details please read the Semver.org specification linked at the end of this document.
.Ss decrement
The
.Nm
utility can decrement the MAJOR, MINOR, or PATCH component of a Semantic Version string.
.Pp
The formula to decrement the MAJOR component of
.Ar version
is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> (MAJOR - 1).0.0
.Pp
The formula to decrement the MINOR component of
.Ar version
is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.(MINOR - 1).0
.Pp
The formula to decrement the PATCH component of
.Ar version
is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.MINOR.(PATCH - 1)
.Pp
The PRERELEASE and BUILD components will be reset when a decrement occurs.
.Pp
The decrement subcommand understands the following mutually exclusive options:
.Bl -tag -width indent
.It Fl -major
Decrement the MAJOR component of
.Ar version
.It Fl -minor
Decrement the MINOR component of
.Ar version
.It Fl -patch
Decrement the PATCH component of
.Ar version
.El
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If the specified component of
.Ar version
is already 0.
.It
If more than one mutually exclusive option is given.
.It
If a required option is missing.
.It
If
.Ar version
does not contain the specified component.
.It
If
.Ar version
is invalid.
.El
.Ss grep
.Nm
can search text from STDIN, and select any lines that contain one or more Semantic Version strings. Each input line that has at least one Semantic Version string is written to the standard output.
.Pp
A line containing a
.Sq version
string will be matched within the text stream if the following criteria are met:
.Bl -bullet -compact
.It
.Sq version
is a valid Semantic Version.
.It
.Sq version
is a whole word.
.It
.Sq version
has whitespace immediately before it, OR its first character is also the first character of the line.
.It
.Sq version
has whitespace immediately after it, OR its last character is also the last character of the line.
.El
.Pp
The grep subcommand understands the following options:
.Bl -tag -width indent
.It Fl o, Fl -only-matching
Print only the matched Semantic Version strings found on a line, with each such version on a separate output line.
.El
.Ss increment
The
.Nm
utility can increment the MAJOR, MINOR, or PATCH component of a Semantic Version string.
.Pp
The formula to increment the MAJOR component of
.Ar version
is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> (MAJOR + 1).0.0
.Pp
The formula to increment the MINOR component of
.Ar version
is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.(MINOR + 1).0
.Pp
The formula to increment the PATCH component of
.Ar version
is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.MINOR.(PATCH + 1)
.Pp
The PRERELEASE and BUILD components will be reset when an increment occurs.
.Pp
The increment subcommand understands the following mutually exclusive options:
.Bl -tag -width indent
.It Fl -major
Increment the MAJOR component of
.Ar version
.It Fl -minor
Increment the MINOR component of
.Ar version
.It Fl -patch
Increment the PATCH component of
.Ar version
.El
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If more than one mutually exclusive option is given.
.It
If a required option is missing.
.It
If
.Ar version
does not contain the specified component.
.It
If
.Ar version
is invalid.
.El
.Ss sort
.Nm
can sort a list of line-delimited Semantic Version strings from STDIN in precedence order (low-to-high).
.Pp
The sort subcommand understands the following options:
.Bl -tag -width indent
.It Fl r, Fl -reverse
Sort in reverse order (high-to-low).
.El
.Pp
The operation will fail if the input is invalid (i.e. it contains anything besides Semantic Versions and line delimiter characters).
.Pp
Note: Some aspects of Semantic Version ordering are undefined in the specification. The
.Nm
utility makes implementation-specific choices to stabilise ordering across executions. Please see the WARNINGS section for details.
.Ss validate
.Nm
can check if an input
.Ar string
is a valid Semantic Version.
.Pp
It will return the result using an exit code. The exit codes are:
.Bl -tag 
.It 0
.Ar string
is a valid Semantic Version.
.It 1
.Ar string
is not a valid Semantic Version.
.El
.Sh OPTIONS
.Pp
The
.Nm
utility understands the following command-line options:
.Bl -tag -width indent
.It Fl h, Fl -help
Display the usage screen.
.El
.Sh EXAMPLES
.Ss Awk
.Pp
To parse the version string
.Sq 1.2.3-SNAPSHOT+2019
:
.Pp
.Dl $ semver awk <<< '1.2.3-SNAPSHOT+2019'
.Dl 1\t2\t3\tSNAPSHOT\t2019
.Pp
.Dl $ semver awk --major <<< '1.2.3-SNAPSHOT+2019'
.Dl 1
.Pp
.Dl $ semver awk --minor <<< '1.2.3-SNAPSHOT+2019'
.Dl 2
.Pp
.Dl $ semver awk --patch <<< '1.2.3-SNAPSHOT+2019'
.Dl 3
.Pp
.Dl $ semver awk --prerelease <<< '1.2.3-SNAPSHOT+2019'
.Dl SNAPSHOT
.Pp
.Dl $ semver awk --build <<< '1.2.3-SNAPSHOT+2019'
.Dl 2019
.Ss Compare
.Pp
To compare version numbers for precedence:
.Pp
.Dl $ semver compare '1.0.0' '2.0.0'
.Dl -1
.Pp
.Dl $ semver compare '1.0.0' '1.0.0'
.Dl 0
.Pp
.Dl $ semver compare '2.0.0' '1.0.0'
.Dl 1
.Ss Decrement
.Pp
To decrement components of the version string
.Sq 2.3.4
:
.Pp
.Dl $ semver decrement --major '2.3.4'
.Dl 1.0.0
.Pp
.Dl $ semver decrement --minor '2.3.4'
.Dl 2.2.0
.Pp
.Dl $ semver decrement --patch '2.3.4'
.Dl 2.3.3
.Ss Grep
Given a line-separated text stream:
.Pp
.Dl $ semver grep <<EOF
.Dl foo 1.1.1
.Dl bar
.Dl baz 2.2.2 qux 3.3.3
.Dl EOF
.Pp
The result will be:
.Pp
.Dl foo 1.1.1
.Dl baz 2.2.2 qux 3.3.3
.Pp
With the -o flag the result will be:
.Pp
.Dl 1.1.1
.Dl 2.2.2
.Dl 3.3.3
.Ss Increment
To increment components of the version string
.Sq 1.2.3
:
.Pp
.Dl $ semver increment --major '1.2.3'
.Dl 2.0.0
.Pp
.Dl $ semver increment --minor '1.2.3'
.Dl 1.3.0
.Pp
.Dl $ semver increment --patch '1.2.3'
.Dl 1.2.4
.Ss Sort
Given a line-separated list of version strings:
.Pp
.Dl $ semver sort <<EOF
.Dl 2.2.2
.Dl 1.1.1
.Dl 4.4.4
.Dl EOF
.Pp
The result will be:
.Pp
.Dl 1.1.1
.Dl 2.2.2
.Dl 4.4.4
.Ss Validate
.Pp
To validate the (valid) version string
.Sq 1.2.3
:
.Pp
.Dl $ semver validate '1.2.3'
.Dl $ echo $?
.Dl 0
.Pp
To validate the (invalid) version string
.Sq v1.0
:
.Pp
.Dl $ semver validate 'v1.0'
.Dl $ echo $?
.Dl 1
.Sh EXIT STATUS
.Ex -std
.Sh WARNINGS
The Semantic Versioning standard does not define an ordering for two versions that are precedence-equal but stringwise-unequal (for example the BUILD is different). To guarantee predictable ordering between executions, the
.Nm
utility applies an additional natural sort on top of the Semantic Version precedence sort. This additional sort is IMPLEMENTATION-SPECIFIC and SUBJECT TO CHANGE between releases, so its algorithm is deliberately left undocumented. You should not rely on it.
.Sh STANDARDS
The
.Nm
utility is expected to conform to the Semantic Versioning standard,
defined at https://semver.org.
