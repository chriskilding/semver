.Dd February 19, 2019
.Dt SEMVER 1
.Os
.Sh NAME
.Nm semver
.Nd Semantic Versioning utility
.Sh SYNOPSIS
.Nm
compare
.Ar version
.Ar version
.Nm
decrement-major
.Ar version
.Nm
decrement-minor
.Ar version
.Nm
decrement-patch
.Ar version
.Nm
get
.Op Fl -major | Fl -minor | Fl -patch | Fl -prerelease | Fl -build
.Ar version
.Nm
grep
.Fl
.Nm
increment-major
.Ar version
.Nm
increment-minor
.Ar version
.Nm
increment-patch
.Ar version
.Nm
init
.Nm
sort
.Op Fl r
.Fl
.Nm
validate
.Ar string
.Nm
xargs
.Ar utility
.Op Ar argument ...
.Nm
.Op Fl h
.Sh DESCRIPTION
The
.Nm
utility compares, generates, modifies, parses, sorts, and validates Semantic Version strings.
.Ss compare
.Nm
can compare two Semantic Versions
.Ar a
and
.Ar b
for precedence.
.Pp
The result of the comparison is a single number printed to STDOUT. The numbers are:
.Bl -tag
.It -1
.Ar a
<
.Ar b
.It 0
.Ar a
==
.Ar b
.It 1
.Ar a
>
.Ar b
.El
.Pp
If either
.Ar a
or
.Ar b
are omitted, no result will be printed, and the utility will exit with an error code.
.Pp
Note: Precedence comparison is NOT a simple lexicographic or numerical comparison - for details please read the Semver.org specification linked at the end of this document.
.Ss decrement-major
.Nm
can decrement the MAJOR component of a
.Ar version
string.
.Pp
The MINOR, PATCH, PRERELEASE, and BUILD components will be reset when a decrement occurs.
.Pp
The formula is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> (MAJOR - 1).0.0
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If the MAJOR component of
.Ar version
is already 0.
.It
If
.Ar version
is invalid.
.El
.Ss decrement-minor
.Nm
can decrement the MINOR component of a
.Ar version
string.
.Pp
The PATCH, PRERELEASE, and BUILD components will be reset when a decrement occurs.
.Pp
The formula is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.(MINOR - 1).0
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If the MINOR component of
.Ar version
is already 0.
.It
If
.Ar version
is invalid.
.El
.Ss decrement-patch
.Nm
can decrement the PATCH component of a
.Ar version
string.
.Pp
The PRERELEASE and BUILD components will be reset when a decrement occurs.
.Pp
The formula is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.MINOR.(PATCH - 1)
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If the PATCH component of
.Ar version
is already 0.
.It
If
.Ar version
is invalid.
.El
.Ss get
.Nm
can get the components of a
.Ar version
string, and print them in tab-separated format to STDOUT. The output is suitable for post-processing by standard *nix tools like 'cut'.
.Pp
The format looks like this:
.Pp
.Dl $ semver get MAJOR.MINOR.PATCH
.Dl MAJOR\tMINOR\tPATCH
.Pp
.Dl $ semver get MAJOR.MINOR.PATCH-PRERELEASE
.Dl MAJOR\tMINOR\tPATCH\tPRERELEASE
.Pp
.Dl $ semver get MAJOR.MINOR.PATCH+BUILD
.Dl MAJOR\tMINOR\tPATCH\t\tBUILD
.Pp
.Dl $ semver get MAJOR.MINOR.PATCH-PRERELEASE+BUILD
.Dl MAJOR\tMINOR\tPATCH\tPRERELEASE\tBUILD
.Pp
The get subcommand understands the following (mutually exclusive) options:
.Bl -tag -width indent
.It Fl -major
Get only the MAJOR component of
.Ar version
.It Fl -minor
Get only the MINOR component of
.Ar version
.It Fl -patch
Get only the PATCH component of
.Ar version
.It Fl -prerelease
Get only the PRERELEASE component of
.Ar version
.It Fl -build
Get only the BUILD component of
.Ar version
.El
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If more than one mutually exclusive option is given.
.It
If
.Ar version
does not contain the specified component.
.It
If
.Ar version
is invalid.
.El
.Ss grep
.Nm
can parse text from STDIN to extract zero or more Semantic Version strings. It will tolerate quite noisy input.
.Pp
A candidate version
.Sq string
will be matched within the text stream if it meets the following criteria:
.Bl -bullet -compact
.It
.Sq string
is a valid Semantic Version.
.It
.Sq string
is a whole word.
.It
.Sq string
has whitespace immediately before it, OR its first character is also the first character of the line.
.It
.Sq string
has whitespace immediately after it, OR its last character is also the last character of the line.
.El
.Ss increment-major
.Nm
can increment the MAJOR component of a
.Ar version
string.
.Pp
The MINOR, PATCH, PRERELEASE, and BUILD components will be reset when an increment occurs.
.Pp
The formula is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> (MAJOR + 1).0.0
.Pp
The operation will fail if
.Ar version
is invalid.
.Ss increment-minor
.Nm
can increment the MINOR component of a
.Ar version
string.
.Pp
The PATCH, PRERELEASE, and BUILD components will be reset when an increment occurs.
.Pp
The formula is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.(MINOR + 1).0
.Pp
The operation will fail if
.Ar version
is invalid.
.Ss increment-patch
.Nm
can increment the PATCH component of a
.Ar version
string.
.Pp
The PRERELEASE and BUILD components will be reset when an increment occurs.
.Pp
The formula is:
.Dl MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD] -> MAJOR.MINOR.(PATCH + 1)
.Pp
The operation will fail if
.Ar version
is invalid.
.Ss init
.Nm
can print the minimum Semantic Version
.Sq 0.0.0
to STDOUT. You can use this as a base-case initializer, for example in a script which fails to find any Semantic Versions in its input.
.Ss sort
.Nm
can sort a list of line-delimited Semantic Version strings from STDIN in precedence order (low-to-high).
.Pp
The sort subcommand understands the following options:
.Bl -tag -width indent
.It Fl r, Fl -reverse
Sort in reverse order (high-to-low).
.El
.Pp
The operation will fail if the input is invalid (i.e. it contains anything besides Semantic Versions and line delimiter characters).
.Pp
Note: Some aspects of Semantic Version ordering are undefined in the specification. The
.Nm
utility makes implementation-specific choices to stabilise ordering across executions. Please see the WARNINGS section for details.
.Ss validate
.Nm
can check if an input
.Ar string
is a valid Semantic Version.
.Pp
It will return the result using an exit code. The exit codes are:
.Bl -tag 
.It 0
.Ar string
is a valid Semantic Version.
.It 1
.Ar string
is not a valid Semantic Version.
.El
.Ss xargs
.Nm
can generate a continuously incrementing sequence of Semantic Versions according to a user-supplied discovery function
.Ar utility
which returns 0 if the Semantic Version passes some user-defined existence check, or >0 if it fails.
.Pp
The
.Ar utility
may optionally take one or more custom
.Ar argument
values, which will be passed to it verbatim during execution.
.Pp
Each occurrence of
.Ar replstring
in the argument list of
.Ar utility
will be replaced with the generated Semantic Version value in each iteration. The default
.Ar replstring
is
.Sq {}
\&.
.Pp
The operation will fail:
.Bl -bullet -compact
.It
If
.Nm
cannot access or execute
.Ar utility
\&.
.It
TODO add
.El
.Sh OPTIONS
.Pp
The
.Nm
utility understands the following command-line options:
.Bl -tag -width indent
.It Fl h, Fl -help
Display the usage screen.
.El
.Sh EXAMPLES
.Ss Compare
.Pp
To compare version numbers for precedence:
.Pp
.Dl $ semver compare '1.0.0' '2.0.0'
.Dl -1
.Pp
.Dl $ semver compare '1.0.0' '1.0.0'
.Dl 0
.Pp
.Dl $ semver compare '2.0.0' '1.0.0'
.Dl 1
.Ss Decrement
.Pp
To decrement components of the version string
.Sq 2.3.4
:
.Pp
.Dl $ semver decrement-major '2.3.4'
.Dl 1.0.0
.Pp
.Dl $ semver decrement-minor '2.3.4'
.Dl 2.2.0
.Pp
.Dl $ semver decrement-patch '2.3.4'
.Dl 2.3.3
.Ss Get
.Pp
To get components of the version string
.Sq 1.2.3-SNAPSHOT+2019
:
.Pp
.Dl $ semver get '1.2.3-SNAPSHOT+2019'
.Dl 1\t2\t3\tSNAPSHOT\t2019
.Pp
.Dl $ semver get '1.2.3-SNAPSHOT+2019' | cut -f 1-3
.Dl 1\t2\t3
.Pp
.Dl $ semver get --major '1.2.3-SNAPSHOT+2019'
.Dl 1
.Pp
.Dl $ semver get --minor '1.2.3-SNAPSHOT+2019'
.Dl 2
.Pp
.Dl $ semver get --patch '1.2.3-SNAPSHOT+2019'
.Dl 3
.Pp
.Dl $ semver get --prerelease '1.2.3-SNAPSHOT+2019'
.Dl SNAPSHOT
.Pp
.Dl $ semver get --build '1.2.3-SNAPSHOT+2019'
.Dl 2019
.Ss Increment
To increment components of the version string
.Sq 1.2.3
:
.Pp
.Dl $ semver increment-major '1.2.3'
.Dl 2.0.0
.Pp
.Dl $ semver increment-minor '1.2.3'
.Dl 1.3.0
.Pp
.Dl $ semver increment-patch '1.2.3'
.Dl 1.2.4
.Ss Sort
Given a line-separated list of version strings:
.Pp
.Dl $ semver sort <<EOF
.Dl 2.2.2
.Dl 1.1.1
.Dl 4.4.4
.Dl EOF
.Pp
The result will be:
.Pp
.Dl 1.1.1
.Dl 2.2.2
.Dl 4.4.4
.Ss Validate
.Pp
To validate the (valid) version string
.Sq 1.2.3
:
.Pp
.Dl $ semver validate '1.2.3'
.Dl $ echo $?
.Dl 0
.Pp
To validate the (invalid) version string
.Sq v1.0
:
.Pp
.Dl $ semver validate 'v1.0'
.Dl $ echo $?
.Dl 1
.Ss Xargs
.Pp
To discover and download all versions of a hypothetical documentation site:
.Pp
.Dl $ semver xargs curl -f -q 'https://example.com/{}/docs/index.html' -o 'example-{}.html'
.Dl $ ls
.Dl example-0.0.1.html
.Dl example-0.0.2.html
.Dl example-0.1.0.html
.Dl example-0.1.1.html
.Dl example-0.2.0.html
.Dl example-0.3.0.html
.Dl example-1.0.0.html
.Dl example-1.0.1.html
.Dl example-1.1.0.html
.Sh EXIT STATUS
.Ex -std
.Sh WARNINGS
The Semantic Versioning standard does not define an ordering for two versions that are precedence-equal but stringwise-unequal (for example the BUILD is different). To guarantee predictable ordering between executions, the
.Nm
utility applies an additional natural sort on top of the Semantic Version precedence sort. This additional sort is IMPLEMENTATION-SPECIFIC and SUBJECT TO CHANGE between releases, so its algorithm is deliberately left undocumented. You should not rely on it.
.Sh STANDARDS
The
.Nm
utility is expected to conform to the Semantic Versioning standard,
defined at https://semver.org.
